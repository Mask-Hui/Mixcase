Self-checksumming (sc) is a tamper-proofing technique that ensures certain program segments (code) in memory hash to known values at runtime. Sc has few restrictions on application and hence can protect a vast majority of programs. The code verification in sc requires computation of the expected hashes after compilation, as the machine-code is not known before. This means the expected hash values need to be adjusted in the binary executable, hence combining sc with other protections is limited due to this adjustment step. However, obfuscation protections are often necessary, as sc protections can be otherwise easily detected and disabled via pattern matching. In this paper, we present a layered protection using virtualization obfuscation, yielding an architecture-agnostic sc protection that requires no post-compilation adjustment. We evaluate the performance of our scheme using a dataset of 25 real-world programs (mibench and 3 cli games). Our results show that the sc scheme induces an average overhead of 43% for a complete protection (100% coverage). The overhead is tolerable for less cpu-intensive programs (e.g. Games) and when only parts of programs (e.g. License checking) are protected. However, large overheads stemming from the virtualization obfuscation were encountered.